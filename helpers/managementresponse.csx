// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ManagementResponseQuickType;
//
//    var managementResponse = ManagementResponse.FromJson(jsonString);
// 
// Generated by https://app.quicktype.io/#l=cs&r=json2csharp

#r "Newtonsoft.Json"

using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

public partial class ManagementResponse
{
    [JsonProperty("id")]
    public string Id { get; set; }

    [JsonProperty("name")]
    public string Name { get; set; }

    [JsonProperty("type")]
    public string Type { get; set; }

    [JsonProperty("location")]
    public string Location { get; set; }

    [JsonProperty("properties")]
    public Properties Properties { get; set; }
}

public partial class Properties
{
    [JsonProperty("numberOfWorkers")]
    public long NumberOfWorkers { get; set; }

    [JsonProperty("defaultDocuments")]
    public string[] DefaultDocuments { get; set; }

    [JsonProperty("netFrameworkVersion")]
    public string NetFrameworkVersion { get; set; }

    [JsonProperty("phpVersion")]
    public string PhpVersion { get; set; }

    [JsonProperty("pythonVersion")]
    public string PythonVersion { get; set; }

    [JsonProperty("nodeVersion")]
    public string NodeVersion { get; set; }

    [JsonProperty("linuxFxVersion")]
    public string LinuxFxVersion { get; set; }

    [JsonProperty("windowsFxVersion")]
    public object WindowsFxVersion { get; set; }

    [JsonProperty("requestTracingEnabled")]
    public bool RequestTracingEnabled { get; set; }

    [JsonProperty("remoteDebuggingEnabled")]
    public bool RemoteDebuggingEnabled { get; set; }

    [JsonProperty("remoteDebuggingVersion")]
    public string RemoteDebuggingVersion { get; set; }

    [JsonProperty("httpLoggingEnabled")]
    public bool HttpLoggingEnabled { get; set; }

    [JsonProperty("logsDirectorySizeLimit")]
    public long LogsDirectorySizeLimit { get; set; }

    [JsonProperty("detailedErrorLoggingEnabled")]
    public bool DetailedErrorLoggingEnabled { get; set; }

    [JsonProperty("publishingUsername")]
    public string PublishingUsername { get; set; }

    [JsonProperty("publishingPassword")]
    public object PublishingPassword { get; set; }

    [JsonProperty("appSettings")]
    public object AppSettings { get; set; }

    [JsonProperty("azureStorageAccounts")]
    public AzureStorageAccounts AzureStorageAccounts { get; set; }

    [JsonProperty("metadata")]
    public object Metadata { get; set; }

    [JsonProperty("connectionStrings")]
    public object ConnectionStrings { get; set; }

    [JsonProperty("machineKey")]
    public object MachineKey { get; set; }

    [JsonProperty("handlerMappings")]
    public object HandlerMappings { get; set; }

    [JsonProperty("documentRoot")]
    public object DocumentRoot { get; set; }

    [JsonProperty("scmType")]
    public string ScmType { get; set; }

    [JsonProperty("use32BitWorkerProcess")]
    public bool Use32BitWorkerProcess { get; set; }

    [JsonProperty("webSocketsEnabled")]
    public bool WebSocketsEnabled { get; set; }

    [JsonProperty("alwaysOn")]
    public bool AlwaysOn { get; set; }

    [JsonProperty("javaVersion")]
    public object JavaVersion { get; set; }

    [JsonProperty("javaContainer")]
    public object JavaContainer { get; set; }

    [JsonProperty("javaContainerVersion")]
    public object JavaContainerVersion { get; set; }

    [JsonProperty("appCommandLine")]
    public string AppCommandLine { get; set; }

    [JsonProperty("managedPipelineMode")]
    public string ManagedPipelineMode { get; set; }

    [JsonProperty("virtualApplications")]
    public VirtualApplication[] VirtualApplications { get; set; }

    [JsonProperty("winAuthAdminState")]
    public long WinAuthAdminState { get; set; }

    [JsonProperty("winAuthTenantState")]
    public long WinAuthTenantState { get; set; }

    [JsonProperty("customAppPoolIdentityAdminState")]
    public bool CustomAppPoolIdentityAdminState { get; set; }

    [JsonProperty("customAppPoolIdentityTenantState")]
    public bool CustomAppPoolIdentityTenantState { get; set; }

    [JsonProperty("runtimeADUser")]
    public object RuntimeAdUser { get; set; }

    [JsonProperty("runtimeADUserPassword")]
    public object RuntimeAdUserPassword { get; set; }

    [JsonProperty("loadBalancing")]
    public string LoadBalancing { get; set; }

    [JsonProperty("routingRules")]
    public object[] RoutingRules { get; set; }

    [JsonProperty("experiments")]
    public Experiments Experiments { get; set; }

    [JsonProperty("limits")]
    public object Limits { get; set; }

    [JsonProperty("autoHealEnabled")]
    public bool AutoHealEnabled { get; set; }

    [JsonProperty("autoHealRules")]
    public object AutoHealRules { get; set; }

    [JsonProperty("tracingOptions")]
    public object TracingOptions { get; set; }

    [JsonProperty("vnetName")]
    public string VnetName { get; set; }

    [JsonProperty("siteAuthEnabled")]
    public bool SiteAuthEnabled { get; set; }

    [JsonProperty("siteAuthSettings")]
    public Dictionary<string, bool?> SiteAuthSettings { get; set; }

    [JsonProperty("cors")]
    public Cors Cors { get; set; }

    [JsonProperty("push")]
    public object Push { get; set; }

    [JsonProperty("apiDefinition")]
    public object ApiDefinition { get; set; }

    [JsonProperty("autoSwapSlotName")]
    public object AutoSwapSlotName { get; set; }

    [JsonProperty("localMySqlEnabled")]
    public bool LocalMySqlEnabled { get; set; }

    [JsonProperty("managedServiceIdentityId")]
    public object ManagedServiceIdentityId { get; set; }

    [JsonProperty("xManagedServiceIdentityId")]
    public object XManagedServiceIdentityId { get; set; }

    [JsonProperty("ipSecurityRestrictions")]
    public IpSecurityRestriction[] IpSecurityRestrictions { get; set; }

    [JsonProperty("http20Enabled")]
    public bool Http20Enabled { get; set; }

    [JsonProperty("minTlsVersion")]
    public string MinTlsVersion { get; set; }

    [JsonProperty("ftpsState")]
    public string FtpsState { get; set; }

    [JsonProperty("reservedInstanceCount")]
    public long ReservedInstanceCount { get; set; }
}

public partial class AzureStorageAccounts
{
}

public partial class Cors
{
    [JsonProperty("allowedOrigins")]
    public Uri[] AllowedOrigins { get; set; }
}

public partial class Experiments
{
    [JsonProperty("rampUpRules")]
    public object[] RampUpRules { get; set; }
}

public partial class IpSecurityRestriction
{
    [JsonProperty("ipAddress")]
    public string IpAddress { get; set; }

    [JsonProperty("action")]
    public string Action { get; set; }

    [JsonProperty("tag")]
    public string Tag { get; set; }

    [JsonProperty("priority")]
    public long Priority { get; set; }

    [JsonProperty("name")]
    public string Name { get; set; }

    [JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
    public string Description { get; set; }
}

public partial class VirtualApplication
{
    [JsonProperty("virtualPath")]
    public string VirtualPath { get; set; }

    [JsonProperty("physicalPath")]
    public string PhysicalPath { get; set; }

    [JsonProperty("preloadEnabled")]
    public bool PreloadEnabled { get; set; }

    [JsonProperty("virtualDirectories")]
    public object VirtualDirectories { get; set; }
}

public partial class ManagementResponse
{
    public static ManagementResponse FromJson(string json) => JsonConvert.DeserializeObject<ManagementResponse>(json, Converter.Settings);
}

/*
public static class Serialize
{
    public static string ToJson(this ManagementResponse self) => JsonConvert.SerializeObject(self, Converter.Settings);
}
*/

internal static class Converter
{
    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    {
        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
        DateParseHandling = DateParseHandling.None,
        Converters = {
            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
        },
    };
}